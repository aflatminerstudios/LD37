<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBetaIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objHostileFish</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run parent code
event_inherited();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup movement variables
hunting = true;
taunting = false;

goldfish = objGoldfish.id;

baseSpeed = 2;
maxSpeed = 6;

turnSpeed = 2;

huntDistance = 400;

facingDir = direction

image_speed = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run parent code
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make sure goldfish exists

if (!instance_exists(goldfish)) {
//  goldfish = self.id;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hunting movement

if (hunting &amp;&amp; instance_exists(goldfish)) {

  speed = baseSpeed;
  
  goalDir = point_direction(x, y, goldfish.x, goldfish.y);
  
  var diff = abs(direction - goalDir);
  
  if (diff &gt; turnSpeed) {
    var s = sign(angle_difference(goalDir, direction));
    direction += s * turnSpeed;
  }    
  
  
  var barrierCollision = position_meeting(x + hspeed, y + vspeed, objBarrier);
  
  if (!barrierCollision) {
    x += hspeed;
    y += vspeed;
  }
  
  if (direction &gt; 90 &amp;&amp; direction &lt; 270) {
    image_xscale = -1;
    
    if (direction &lt; 180) {
      viewDir = direction - 180;
    } else if (direction &gt; 180) {
      viewDir = direction - 180;
    } else {
      viewDir = 0;  
    }
  
  } else {
    image_xscale = 1;
    viewDir = direction;
  }
  
  
  image_angle = viewDir;

  if (point_distance(x, y, goldfish.x, goldfish.y) &lt; huntDistance) {
    taunting = true;
    hunting = false;
    facingDir = direction;
    
    var ii = image_index;
    sprite_index = sprBetaAngry;
    image_index = ii;
  }
  
  
  speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Taunting movement

if (taunting &amp;&amp; instance_exists(goldfish)) {

  goalDir = point_direction(x, y, goldfish.x, goldfish.y);
  
  var diff = abs(direction - goalDir);
  
  if (diff &gt; turnSpeed) {
    var s = sign(angle_difference(goalDir, facingDir));
    facingDir += s * turnSpeed;
  } 
  if (facingDir &gt; 90 &amp;&amp; facingDir &lt; 270) {
    image_xscale = -1;
    
    if (facingDir &lt; 180) {
      viewDir = facingDir - 180;
    } else if (facingDir &gt; 180) {
      viewDir = facingDir - 180;
    } else {
      viewDir = 0;  
    }
  
  } else {
    image_xscale = 1;
    viewDir = facingDir;
  }

  var yDist = goldfish.y - y;
  var s = sign(yDist);
  
  var barrierCollision = position_meeting(x, y + (s * baseSpeed), objBarrier);
  if (abs(yDist) &gt; (baseSpeed * 2) &amp;&amp; !barrierCollision) {
    y += s * baseSpeed;
  }
  
  image_angle = viewDir;
  
  if (point_distance(x, y, goldfish.x, goldfish.y) &gt; huntDistance) {
    taunting = false;
    hunting = true;
    facingDir = direction;
    
    var ii = image_index;
    sprite_index = sprBetaIdle;
    image_index = ii;
    
  }
  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide with cat
if (place_meeting(x, y, objCatPaw)) {
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
