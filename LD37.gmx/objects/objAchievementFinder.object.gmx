<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pop up achievement toasts

if (count &lt; array_length_1d(achievesEarned)) {  
  var a = instance_create(400, 300, objAchievementToast);
  a.which = achievesEarned[count];
  count++;
  alarm[0] = room_speed * 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for high score received

r_str = "null";

  //show_debug_message("get: " + string(get));
  //show_debug_message("id: " + string(ds_map_find_value(async_load, "id")));
  //if ds_map_find_value(async_load, "id") == get
  {
    //show_debug_message("status: " + string(ds_map_find_value(async_load, "status")));
    if ds_map_find_value(async_load, "status") == 0
    {
      r_str = ds_map_find_value(async_load, "result");
    }
    else
    {
      r_str = "null";
    }
  }
  ///Only if it's a valid return
  if (r_str != "null") {
    if (string_count("Success", r_str) &gt; 0) {
      show_debug_message("YEAH!");
    } else if (string_count("Added", r_str) &gt; 0) {
      show_debug_message("Added Achieve!");
    } else if (string_count("Failure", r_str) &gt; 0) {
      show_debug_message("Failed add");
    } else {
    
      //split r_str into array of strings by spaces
      var splitBy = " "; //string to split the first string by
      var slot = 0;
      achievesEarned[0] = ""; //array to hold all split strings
      var str2 = "";
      var i;
      for (i = 2; i &lt; (string_length(r_str)+1); i++) {
          var currStr = string_copy(r_str, i, 1);
          if (currStr == splitBy) {
              achievesEarned[slot] = str2; //add this split to the array of all splits
              slot++;
              str2 = "";
          } else {
              str2 = str2 + currStr;
              achievesEarned[slot] = str2;
          }
      }
      count = 0;
      show_debug_message(slot);
      if (slot &gt; 1) {
        alarm[0] = room_speed;
      }
    
      for (i = 0; i &lt; array_length_1d(achievesEarned); i++) {
        scrSendAchieve(achievesEarned[i], objTextInput.text);
      }
      
    }
  }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
