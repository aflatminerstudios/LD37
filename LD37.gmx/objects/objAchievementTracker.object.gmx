<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default all achievements to false

live60s = false;
score250game = false;
flakes15game = false;
stareAtWall = false;
lazyBum = false;
exploreCorners = false;
pissedShrimp = false;

//explore corners subvariables
exploreCornersTopLeft = false;
exploreCornersTopRight = false;
exploreCornersBotLeft = false;
exploreCornersBotRight = false;

//Number of shrimp pissed off
shrimp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for 15 flakes
if (!flakes15game) {
 if (objGameControl.flakesCollected &gt;= 15) {
    scrAwardAchievement("flakes15game");
    flakes15game = true;
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for 250 score
if (!score250game) {
 if (score &gt;= 250) {
    scrAwardAchievement("score250game");
    score250game = true;
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for staring at wall
if (!stareAtWall) {
  with (objGoldfish) {
    //If not moving
    if (curForward == 0) {
      //And x is within 200 of the edge of screen and you are looking 
      //the appropriate direction
      if ((x &lt; 200 &amp;&amp; direction &gt; 90 &amp;&amp; direction &lt; 270) ||
          (x &gt; room_width - 200 &amp;&amp; (direction &lt; 90 || direction &gt; 270))) {
        wallStare++;
        if (wallStare &gt;= (room_speed * stareSeconds)) {
          scrAwardAchievement("stareAtWall");
        }             
      } else {
        wallStare = 0;
      }
    } else {
      wallStare = 0;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for living 60 seconds
if (!live60s) {
  if (objTimer.time &gt;= 60) {
    scrAwardAchievement("live60s");
    live60s = true;
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for lazy bum
if (!lazyBum) {
  with (objGoldfish) {
    //If not moving
    if (curForward == 0) {
        sitStill++;
        if (sitStill &gt;= (room_speed * lazyBumSeconds)) {
          scrAwardAchievement("lazyBum");
        }                  
    } else {
      sitStill = 0;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check explore corners
if (!exploreCorners) {

  if (!exploreCornersTopLeft) {
    with (objGoldfish) {
      if (x &lt; LEFTSIDEOFTANK + 200 &amp;&amp; y &lt; TOPOFTANK + 200) {
        other.exploreCornersTopLeft = true;
      }
    }
  }
  
  if (!exploreCornersTopRight) {
    with (objGoldfish) {
      if (x &gt; RIGHTSIDEOFTANK - 200 &amp;&amp; y &lt; TOPOFTANK + 200) {
        other.exploreCornersTopRight = true;
      }
    }  
  }
  
  if (!exploreCornersBotLeft) {
    with (objGoldfish) {
      if (x &lt; LEFTSIDEOFTANK + 200 &amp;&amp; y &gt; BOTTOMOFTANK - 200) {
        other.exploreCornersBotLeft = true;
      }
    }  
  }
  
  if (!exploreCornersBotRight) {
    with (objGoldfish) {
      if (x &gt; RIGHTSIDEOFTANK - 200 &amp;&amp; y &gt; BOTTOMOFTANK -200) {
        other.exploreCornersBotRight = true;
      }
    }  
  }


  if (exploreCornersTopLeft &amp;&amp; exploreCornersTopRight &amp;&amp; exploreCornersBotLeft &amp;&amp; exploreCornersBotRight) {
    scrAwardAchievement('exploreCorners');
    exploreCorners = true;
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checking for angry shrimp

if (!pissedShrimp) {
  if (shrimp &gt;= 3) {
    scrAwardAchievement("pissedShrimp");  
    pissedShrimp = true;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
